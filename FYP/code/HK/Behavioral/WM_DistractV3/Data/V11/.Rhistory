labs(x = 'Subject', y = 'False Alarm rate',  title = "Performance", fill = 'setsize')+
scale_x_continuous(breaks = seq(1,s,1))+
theme_classic()+
theme(plot.title = element_text(hjust = 0.5))
FAplot5
FAavgss1<- FA5 %>% filter(discrim ==0, setsize == 1)
FAavgss15 <- mean(FAavgss1$rate)
FA5ss1sd<-sd(FAavgss1$rate)
FAavgss2<- FA5 %>% filter(discrim ==0, setsize == 2)
FAavgss25 <- mean(FAavgss2$rate)
FA5ss2sd<-sd(FAavgss2$rate)
rm(FAavgss1, FAavgss2)
dplot5 <- d5%>%
#filter(subject == c(1, 2, 3, 4, 5, 6, 7, 8))%>% # can exclude subjects with 0 FA
ggplot(aes(x = subject, y = dprime, fill = factor(setsize)))+
geom_col(position = position_dodge())+
labs(x = 'Subject', y = "d'",  title = "Detection sensitivity", fill = 'setsize')+
scale_x_continuous(breaks = seq(1,s,1))+
theme_classic()+
theme(plot.title = element_text(hjust = 0.5))
dplot5
# figure out a way to label infinity
davgss1<- d5 %>% filter(!is.infinite(dprime), setsize == 1)
davgss15 <- mean(davgss1$dprime)
d5ss1sd<-sd(davgss1$dprime)
davgss2<- d5 %>% filter(!is.infinite(dprime), setsize == 2)
davgss25 <- mean(davgss2$dprime)
d5ss2sd<-sd(davgss2$dprime)
rm(davgss1 ,davgss2)
# count hits
hit6<- data1 %>% filter(!is.nan(testorient)) %>% group_by(subject,setsize, Hit, .drop = FALSE) %>% summarize(n=n())# when probe on target count hits
hit6<- hit6%>% filter(!is.na(Hit)) # remove non response
# check for missing 0s
if (nrow(hit6) < 4*s) {print(paste0('warning check subject missing row'))}# warning missing data
# fill in missing data
##no subject had no misses
# missing <- data.frame(6,1, 0, 0)
# names(missing) <- c('subject', 'setsize','Hit', 'n')
# hit6<- rbind(hit6, missing) # add back missing data
# hit6 <- hit6[order(hit6$subject, hit6$Hit),] # reorder
# rm(missing)
# calculate rate
totals <- rowsum(hit6$n, rep(1:(2*s), each = 2))
trials <- rep(totals, each = 2)
hit6$rate <- hit6$n/trials
rm(trials, totals)
# count false alarms
FA6 <- data1 %>% filter(is.nan(testorient)) %>% group_by(subject, setsize, .drop = FALSE) %>% count(Hit) # when probe on target count hits
FA6 <- FA6 %>% filter(!is.na(Hit)) # remove non response
# check for missing 0s
if (nrow(FA6) < 4*s) {print(paste0('warning check subject missing row'))}# warning missing data
## subject 2, 5, 6, 8 had no FAs in some conditions
missing <- data.frame(1,2, 0, 0)
names(missing) <- c('subject', 'setsize','Hit', 'n')
FA6<- rbind(FA6, missing) # add back missing data
missing <- data.frame(8,2, 0, 0)
names(missing) <- c('subject', 'setsize','Hit', 'n')
FA6<- rbind(FA6, missing) # add back missing data
missing <- data.frame(13,1, 0, 0)
names(missing) <- c('subject', 'setsize','Hit', 'n')
FA6<- rbind(FA6, missing) # add back missing data
rm(missing)
FA6 <- FA6[order(FA6$subject, FA6$setsize, FA6$Hit),] # reorder
# calculate rate
totals <- rowsum(FA6$n, rep(1:(2*s), each = 2))
trials <- rep(totals, each = 2)
FA6$rate <- FA6$n/trials
rm( trials, totals)
hits <- hit6 %>% filter(Hit == 1) # hits
misses <- hit6 %>% filter(Hit == 0) # misses
FAs<- FA6 %>% filter(Hit == 0) # false alarms
CRs<- FA6 %>% filter(Hit == 1) # correct rejections
d6 <- cbind(hits$subject, hits$setsize, hits$n, misses$n, FAs$n, CRs$n)
d6<-data.frame(d6)
names(d6) <- c('subject', 'setsize','hits','misses', 'false_alarms', 'correct_rejections')
d6$Hrate<- hits$rate
d6$FArate<- FAs$rate
d6$dprime<- qnorm(d6$Hrate) - qnorm(d6$FArate)
rm(hits, misses, FAs, CRs)# cleanup vars
hitplot6 <- hit6 %>% filter(Hit == 1) %>%
ggplot(aes(x = subject, y = rate, fill = factor(setsize)))+
geom_col(position = position_dodge())+
labs(x = 'Subject', y = 'Hit rate',  title = "Performance", fill = 'setsize')+
scale_x_continuous(breaks = seq(1,s,1))+
theme_classic()+
theme(plot.title = element_text(hjust = 0.5))
hitplot6
hitavgss1<- hit6 %>% filter(Hit ==1, setsize == 1)
hitavgss16 <- mean(hitavgss1$rate)
hit6ss1sd<-sd(hitavgss1$rate)
hitavgss2<- hit6 %>% filter(Hit ==1, setsize == 2)
hitavgss26 <- mean(hitavgss2$rate)
hit6ss2sd<-sd(hitavgss2$rate)
rm(hitavgss1, hitavgss2)
FAplot6 <- FA6 %>% filter(Hit == 0) %>%
ggplot(aes(x = subject, y = rate, fill = factor(setsize)))+
geom_col(position = position_dodge())+
labs(x = 'Subject', y = 'False Alarm rate',  title = "Performance", fill = 'setsize')+
scale_x_continuous(breaks = seq(1,s,1))+
theme_classic()+
theme(plot.title = element_text(hjust = 0.5))
FAplot6
dplot6 <- d6 %>%
#filter(subject == c(1, 2, 3, 4, 5, 6, 7, 8))%>% # can exclude subjects with 0 FA
ggplot(aes(x = subject, y = dprime, fill = factor(setsize)))+
geom_col(position = position_dodge())+
labs(x = 'Subject', y = "d'",  title = "Detection sensitivity", fill = 'setsize')+
scale_x_continuous(breaks = seq(1,s,1))+
theme_classic()+
theme(plot.title = element_text(hjust = 0.5))
dplot6
davgss1<- d6 %>% filter(!is.infinite(dprime),setsize == 1)
davgss16 <- mean(davgss1$dprime)
sd(davgss1$dprime)
davgss2<- d6 %>% filter(!is.infinite(dprime),setsize == 2)
davgss26 <- mean(davgss2$dprime)
sd(davgss2$dprime)
rm(davgss1, davgss2)
# figure out a way to label infinity
# clear vars
# count hits
hit7<- data1 %>% filter(!is.nan(testorient)) %>% group_by(subject, contrast, setsize, .drop = FALSE) %>% count(discrim) # when probe on target count hits
hit7<- hit7%>% filter(!is.na(discrim)) # remove non response
# check for missing 0s
if (nrow(hit7) < 8*s) {print(paste0('warning check subject missing row'))}# warning missing data
# fill in missing data
## subject 1, 2, 8 had  times when reported nothing there when something there
missing <- data.frame(1, 0.5, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(1, 0.5, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(1, 0.8, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(1, 0.8, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(2, 0.5, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(3, 0.5, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(3, 0.8, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(5, 0.5, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(5, 0.5, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(8, 0.8, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(10, 0.5, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(10, 0.8, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(11, 0.5, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(11, 0.8, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(12, 0.5, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(13, 0.5, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
missing <- data.frame(13, 0.8, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
hit7<- rbind(hit7, missing) # add back missing data
hit7 <- hit7[order(hit7$subject, hit7$contrast, hit7$setsize, hit7$discrim),] # reorder
rm(missing)
# calculate rate
totals <- rowsum(hit7$n, rep(1:(4*s), each = 2))
trials <- rep(totals, each = 2)
hit7$rate <- hit7$n/trials
rm(trials, totals)
# count false alarms
FA7 <- data1 %>% filter(is.nan(testorient)) %>% group_by(subject, contrast, setsize,.drop = FALSE) %>% count(discrim) # when probe on target count hits
FA7 <- FA7 %>% filter(!is.na(discrim)) # remove non response
# check for missing 0s
if (nrow(FA7) < 8*s) {print(paste0('warning check subject missing row'))}# warning missing data
## subject 5, 8 had no FAs
missing <- data.frame(1, 0.5, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
missing <- data.frame(1, 0.8, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
missing <- data.frame(1, 0.8, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
missing <- data.frame(2, 0.8, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
missing <- data.frame(3, 0.8, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
missing <- data.frame(5, 0.8, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
missing <- data.frame(8, 0.5, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
missing <- data.frame(8, 0.5, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
missing <- data.frame(8, 0.8, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
missing <- data.frame(9, 0.5, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
missing <- data.frame(9, 0.8, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
missing <- data.frame(10, 0.8, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
missing <- data.frame(13, 0.5, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
missing <- data.frame(13, 0.8, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
missing <- data.frame(13, 0.8, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','discrim', 'n')
FA7<- rbind(FA7, missing) # add back missing data
FA7 <- FA7[order(FA7$subject, FA7$contrast, FA7$setsize, FA7$discrim),] # reorder
rm(missing)
# calculate rate
totals <- rowsum(FA7$n, rep(1:(4*s), each = 2))
trials <- rep(totals, each = 2)
FA7$rate <- FA7$n/trials
rm(trials, totals)
hits <- hit7 %>% filter(discrim == 1) # hits
misses <- hit7 %>% filter(discrim == 0) # misses
FAs<- FA7 %>% filter(discrim == 0) # false alarms
CRs<- FA7 %>% filter(discrim == 1) # correct rejections
d7 <- cbind(hits$subject,hits$contrast,hits$setsize, hits$n, misses$n, FAs$n, CRs$n)
d7<-data.frame(d7)
names(d7) <- c('subject','contrast', 'setsize', 'hits','misses', 'false_alarms', 'correct_rejections')
d7$Hrate<- hits$rate
d7$FArate<- FAs$rate
d7$dprime<- qnorm(d7$Hrate) - qnorm(d7$FArate)
rm(hits, misses, FAs, CRs)# cleanup vars
# four combos to calculate avgs
# a= (1,.5), b= (1,.8), c =(2, .5), d = (2, .8)
a<- hit7 %>% filter(discrim ==1, contrast == 0.5, setsize == 1)
a.m<- mean(a$rate)
a.s<-sd(a$rate)
b<- hit7 %>% filter(discrim ==1, contrast == 0.8, setsize == 1)
b.m <- mean(b$rate)
b.s<-sd(b$rate)
c<- hit7 %>% filter(discrim ==1, contrast == 0.5, setsize == 2)
c.m <- mean(c$rate)
c.s<-sd(c$rate)
d<- hit7 %>% filter(discrim ==1, contrast == 0.8, setsize == 2)
d.m <- mean(d$rate)
d.s<-sd(d$rate)
# there's a shorter way to do this
agg_discrim <- data.frame(c(a.m,b.m,c.m,d.m))
names(agg_discrim)<-c('mean')
agg_discrim$sd <- c(a.s,b.s,c.s,d.s)
agg_discrim$contrast <- c(.5,.8,.5,.8)
agg_discrim$setsize<- c(1,1,2,2)
rm(a,b, c,d,a.m,a.s,b.m,b.s,c.m,c.s,d.m,d.s)
## add error bars, change color, change contrast labels, increase font size
#plot aggregate
aggplot1 <- agg_discrim %>%
ggplot(aes(x = contrast, y = (mean*100), fill = factor(setsize)))+
#geom_col(position = position_dodge())+
geom_bar(stat = 'identity', color = 'black', position = position_dodge())+
geom_errorbar(aes(ymin = (100*(mean-sd)), ymax = (100*(mean+sd))), width = .05, position = position_dodge(.25))+
labs(x = 'Contrast', y = 'Discrimination (% correct)', fill = 'Set Size')+
scale_x_continuous(breaks = c(0.5, 0.8),labels = c('low', 'high'))+
scale_fill_manual(values = c('darkolivegreen2', 'deepskyblue'))+
theme_classic()+
theme(text = element_text(size = 20))
aggplot1
## or violin plot it
# create pairs
hit7paired <- hit7 %>% filter(discrim == 1)
hit7paired <- hit7paired[order(hit7paired$subject, hit7paired$contrast),] # reorder
hit7paired$paired <- rep(1:(52/2), each = 2)
# try to get lines to work
hit7paired <- hit7paired %>% mutate(newc = case_when(contrast == .5 && setsize == 1 ~.45, contrast == .5 && setsize == 2 ~.55, contrast == .8 && setsize == 1 ~.75, contrast == .8 && setsize == 2 ~.85))
aggplot1_violin <-hit7paired %>%
ggplot(aes(x = as.factor(newc), y = (100*rate), fill = factor(setsize)))+
geom_violin()+
geom_point(aes(x = as.factor(newc),group = paired),position = position_jitterdodge(jitter.width = .3, dodge.width =.2, seed = 123))+
#geom_point(position = position_dodge(width = .2, seed = 123))+
labs(x = 'Contrast', y = 'Discrimination (% correct)', fill = 'Set Size')+
geom_line(aes(x = as.factor(newc),group = paired), color = 'black', alpha = .7,position = position_jitterdodge(jitter.width = .3, dodge.width =.2, seed = 123))+
#geom_line(aes( group = paired), color = 'black', alpha = .7,position = position_jitterdodge(jitter.width = .3, dodge.width =.8, seed = 123))+
scale_x_discrete(breaks = c(.45, .75),labels = c('low', 'high'))+
scale_fill_manual(values = c('#9ebcda', '#8856a7'))+
theme_classic()+
theme(text = element_text(size = 20), legend.position = 'none', axis.text.x =  element_text(hjust = -2), axis.ticks = element_blank())
aggplot1_violin
# aggregate
# four combos to calculate avgs
# a= (1,.5), b= (1,.8), c =(2, .5), d = (2, .8)
a<- FA7 %>% filter(discrim ==0, contrast == 0.5, setsize == 1)
a.m<- mean(a$rate)
a.s<-sd(a$rate)
b<- FA7 %>% filter(discrim ==0, contrast == 0.8, setsize == 1)
b.m <- mean(b$rate)
b.s<-sd(b$rate)
c<- FA7 %>% filter(discrim ==0, contrast == 0.5, setsize == 2)
c.m <- mean(c$rate)
c.s<-sd(c$rate)
d<- FA7 %>% filter(discrim ==0, contrast == 0.8, setsize == 2)
d.m <- mean(d$rate)
d.s<-sd(d$rate)
# there's a shorter way to do this
agg_FA <- data.frame(c(a.m,b.m,c.m,d.m))
names(agg_FA)<-c('mean')
agg_FA$sd <- c(a.s,b.s,c.s,d.s)
agg_FA$contrast <- c(.5,.8,.5,.8)
agg_FA$setsize<- c(1,1,2,2)
rm(a,b, c,d,a.m,a.s,b.m,b.s,c.m,c.s,d.m,d.s)
## add error bars, change color, change contrast labels, increase font size
#plot aggregate
agg_FAplot1 <- agg_FA %>%
ggplot(aes(x = setsize, y = mean, fill = factor(contrast)))+
geom_col(position = position_dodge())+
#geom_errorbar(data =sd)+
labs(x = 'Set Size', y = 'False Alarm rate',  title = "False Alarms", fill = 'Contrast')+
scale_x_continuous(breaks = c(1,2))+
#scale_fill_gradient()+
scale_fill_discrete()+
theme_classic()+
theme(plot.title = element_text(hjust = 0.5))
agg_FAplot1
# or violin
## or violin plot it
# create pairs
FA7paired <- FA7 %>% filter(discrim == 0)
FA7paired <- FA7paired[order(FA7paired$subject, FA7paired$contrast),] # reorder
FA7paired$paired <- rep(1:(52/2), each = 2)
# try to get lines to work
FA7paired <- FA7paired %>% mutate(newc = case_when(contrast == .5 && setsize == 1 ~.45, contrast == .5 && setsize == 2 ~.55, contrast == .8 && setsize == 1 ~.75, contrast == .8 && setsize == 2 ~.85))
aggFAplot1_violin <-FA7paired %>%
ggplot(aes(x = as.factor(newc), y = rate, fill = factor(setsize)))+
geom_violin()+
geom_point(aes(x = as.factor(newc),group = paired),position = position_jitterdodge(jitter.width = .3, dodge.width =.2, seed = 123))+
labs(x = 'Contrast', y = 'False Alarm Rate', fill = 'Set Size')+
geom_line(aes(x = as.factor(newc),group = paired), color = 'black', alpha = .7,position = position_jitterdodge(jitter.width = .3, dodge.width =.2, seed = 123))+
scale_x_discrete(breaks = c(.45, .75),labels = c('low', 'high'))+
scale_fill_manual(values = c('#9ebcda', '#8856a7'))+
theme_classic()+
theme(text = element_text(size = 20), legend.position = 'none', axis.text.x =  element_text(hjust = -2), axis.ticks = element_blank())
aggFAplot1_violin
# figure out a way to label infinity
davgl<- d3 %>% filter(!is.infinite(dprime), contrast == 0.5)
davgl3 <- mean(davgl$dprime)
sd(davgl$dprime)
davgh<- d3 %>% filter(!is.infinite(dprime), contrast == 0.8)
davgh3 <- mean(davgh$dprime)
sd(davgh$dprime)
rm(davgl ,davgh)
# aggregate
# four combos to calculate avgs
# a= (1,.5), b= (1,.8), c =(2, .5), d = (2, .8)
a<- d7 %>% filter(!is.infinite(dprime), contrast == 0.5, setsize == 1)
a.m<- mean(a$dprime)
a.s<-sd(a$dprime)
b<- d7 %>% filter(!is.infinite(dprime), contrast == 0.8, setsize == 1)
b.m <- mean(b$dprime)
b.s<-sd(b$dprime)
c<- d7 %>% filter(!is.infinite(dprime), contrast == 0.5, setsize == 2)
c.m <- mean(c$dprime)
c.s<-sd(c$dprime)
d<- d7 %>% filter(!is.infinite(dprime), contrast == 0.8, setsize == 2)
d.m <- mean(d$dprime)
d.s<-sd(d$dprime)
# there's a shorter way to do this
agg_d <- data.frame(c(a.m,b.m,c.m,d.m))
names(agg_d)<-c('m_dprime')
agg_d$sd <- c(a.s,b.s,c.s,d.s)
agg_d$contrast <- c(.5,.8,.5,.8)
agg_d$setsize<- c(1,1,2,2)
rm(a,b, c,d,a.m,a.s,b.m,b.s,c.m,c.s,d.m,d.s)
## add error bars, change color, change contrast labels, increase font size
#plot aggregate
agg_dplot1 <- agg_d %>%
ggplot(aes(x = factor(contrast), y = m_dprime, fill = factor(setsize)))+
geom_bar(stat = 'identity', color = 'black', position = position_dodge())+
geom_errorbar(aes(ymin = m_dprime-sd , ymax =m_dprime+sd), width = .05, position = position_dodge(.9))+
labs(x = 'Contrast', y = "Detection Sensitivity (d')", fill = 'Set Size')+
scale_x_discrete(labels = c('low', 'high'))+
scale_fill_manual(values = c('#9ebcda', '#8856a7'))+
theme_classic()+
theme(text = element_text(size = 20))
agg_dplot1
# or violin
## or violin plot it
# create pairs
d7paired <- d7 %>% filter(!is.infinite(dprime))
d7paired <- d7paired[order(d7paired$subject, d7paired$contrast),] # reorder
d7paired$paired <- c(1,2,3,4,5,5,6,6,7,8,8,9,9,10,10,11,11,12,13,14,15,16,17,18,19,19,20)
# try to get lines to work
d7paired <- d7paired %>% mutate(newc = case_when(contrast == .5 && setsize == 1 ~.45, contrast == .5 && setsize == 2 ~.55, contrast == .8 && setsize == 1 ~.75, contrast == .8 && setsize == 2 ~.85))
d7paired$newc<- c(.55,.75,.55,.75,.45,.55,.75,.85,.75,.45,.55,.75,.85,.45,.55,.75,.85,.45,.85,.45,.85,.55,.75,.55,.75,.85,.55)
d7paired %>%
ggplot(aes(x = as.factor(newc), y = dprime, fill = factor(setsize)))+
geom_violin()+
geom_point(aes(group = paired),position = position_jitterdodge(jitter.width = .8, dodge.width =.2))+
labs(x = 'Contrast', y = 'False Alarm Rate', fill = 'Set Size')+
#geom_line(aes(x = as.factor(newc),group = paired), color = 'black', alpha = .7,position = position_jitterdodge(jitter.width = .3, dodge.width =.2, seed = 123))+
scale_x_discrete(breaks = c(.45, .75),labels = c('low', 'high'))+
scale_fill_manual(values = c('#9ebcda', '#8856a7'))+
theme_classic()+
theme(text = element_text(size = 20), axis.ticks = element_blank(), legend.position = 'none')
# count hits
hit8<- data1 %>% filter(!is.nan(testorient)) %>% group_by(subject, contrast, setsize, .drop = FALSE) %>% count(Hit) # when probe on target count hits
hit8<- hit8%>% filter(!is.na(Hit)) # remove non response
# check for missing 0s
if (nrow(hit8) < 8*s) {print(paste0('warning check subject missing row'))}# warning missing data
# fill in missing data
## subject 1, 2, 8 had  times when reported nothing there when something there
missing <- data.frame(7, 0.8, 1, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','Hit', 'n')
hit8<- rbind(hit8, missing) # add back missing data
missing <- data.frame(10, 0.5, 2, 0, 0)
names(missing) <- c('subject', 'contrast','setsize','Hit', 'n')
hit8<- rbind(hit8, missing) # add back missing data
hit8 <- hit8[order(hit8$subject, hit8$contrast, hit8$setsize, hit8$Hit),] # reorder
rm(missing)
# calculate rate
totals <- rowsum(hit8$n, rep(1:(4*s), each = 2))
trials <- rep(totals, each = 2)
hit8$rate <- hit8$n/trials
rm(trials, totals)
# four combos to calculate avgs
# a= (1,.5), b= (1,.8), c =(2, .5), d = (2, .8)
a<- hit8 %>% filter(Hit ==1, contrast == 0.5, setsize == 1)
a.m<- mean(a$rate)
a.s<-sd(a$rate)
b<- hit8 %>% filter(Hit ==1, contrast == 0.8, setsize == 1)
b.m <- mean(b$rate)
b.s<-sd(b$rate)
c<- hit8 %>% filter(Hit ==1, contrast == 0.5, setsize == 2)
c.m <- mean(c$rate)
c.s<-sd(c$rate)
d<- hit8 %>% filter(Hit ==1, contrast == 0.8, setsize == 2)
d.m <- mean(d$rate)
d.s<-sd(d$rate)
# there's a shorter way to do this
agg_ori <- data.frame(c(a.m,b.m,c.m,d.m))
names(agg_ori)<-c('mean')
agg_ori$sd <- c(a.s,b.s,c.s,d.s)
agg_ori$contrast <- c(.5,.8,.5,.8)
agg_ori$setsize<- c(1,1,2,2)
rm(a,b, c,d,a.m,a.s,b.m,b.s,c.m,c.s,d.m,d.s)
## add error bars, change color, change contrast labels, increase font size
#plot aggregate
aggplot2 <- agg_ori %>%
ggplot(aes(x = contrast, y = mean, fill = factor(setsize)))+
geom_col(position = position_dodge())+
#geom_errorbar(data =sd)+
labs(x = 'Set Size', y = '% Correct',  title = "Orientation Discrimination Performance", fill = 'Set Size')+
scale_x_continuous(breaks = c(1,2))+
#scale_fill_gradient()+
scale_fill_brewer()+
theme_classic()+
theme(plot.title = element_text(hjust = 0.5))
aggplot2
## or violin plot it
# create pairs
hit8paired <- hit8 %>% filter(Hit == 1)
hit8paired <- hit8paired[order(hit8paired$subject, hit8paired$contrast),] # reorder
hit8paired$paired <- rep(1:(52/2), each = 2)
# try to get lines to work
hit8paired <- hit8paired %>% mutate(newc = case_when(contrast == .5 && setsize == 1 ~.45, contrast == .5 && setsize == 2 ~.55, contrast == .8 && setsize == 1 ~.75, contrast == .8 && setsize == 2 ~.85))
aggplot2_violin <-hit8paired %>%
ggplot(aes(x = as.factor(newc), y = (100*rate), fill = factor(setsize)))+
geom_violin()+
geom_point(aes(x = as.factor(newc),group = paired),position = position_jitterdodge(jitter.width = .3, dodge.width =.2, seed = 123))+
#geom_point(position = position_dodge(width = .2, seed = 123))+
labs(x = 'Contrast', y = 'Orientation Performance (% correct)', fill = 'Set Size')+
geom_line(aes(x = as.factor(newc),group = paired), color = 'black', alpha = .7,position = position_jitterdodge(jitter.width = .3, dodge.width =.2, seed = 123))+
#geom_line(aes( group = paired), color = 'black', alpha = .7,position = position_jitterdodge(jitter.width = .3, dodge.width =.8, seed = 123))+
scale_x_discrete(breaks = c(.45, .75),labels = c('low', 'high'))+
scale_fill_manual(values = c('#9ebcda', '#8856a7'))+
theme_classic()+
theme(text = element_text(size = 20), legend.position = 'none', axis.text.x =  element_text(hjust = -2), axis.ticks = element_blank())
aggplot2_violin
discperf$contrast <- factor(discperf$contrast, levels = c(.5, .8), labels = c('low', 'high'))
discperf$setsize <- factor(discperf$setsize, levels = c(1, 2), labels = c('one', 'two'))
# for orientation discrimination
discperf<-hit7paired
discperf$contrast <- factor(discperf$contrast, levels = c(.5, .8), labels = c('low', 'high'))
discperf$setsize <- factor(discperf$setsize, levels = c(1, 2), labels = c('one', 'two'))
discmodel<-lm(formula = rate ~ setsize * contrast, data = discperf) %>% anova()
discmodel
# for detection sensitivity
oriperf<-hit8paired
oriperf$contrast <- factor(oriperf$contrast, levels = c(.5, .8), labels = c('low', 'high'))
oriperf$setsize <- factor(oriperf$setsize, levels = c(1, 2), labels = c('one', 'two'))
orimodel<-lm(formula = rate ~ setsize * contrast, data = oriperf) %>% anova()
orimodel
save.image("~/Documents/FYP/code/HK/Behavioral/WM_DistractV3/Data/V11/vars.RData")
