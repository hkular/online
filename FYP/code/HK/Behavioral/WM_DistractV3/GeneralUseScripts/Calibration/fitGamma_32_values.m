%This script is from when I calibrated the mini helmholtz with 32 steps%instead of the usual 8. The "fitGamma" function has been adapted (by RR on sept 15th, 2009) %to be able to work also for 32 values measured. clear allclose allcd('/Users/rosanne/Dropbox/GeneralUseScripts/Calibration')expdir = pwd; %Set the experimental directory to the current directory 'pwd'eval(['addpath ' expdir '/GeneralUseScripts']); %Adds my general use scripts to the pathcomputer = '3TW';savegrey = 1; %if 1 it saves Grey too% calibration luminance values taken by Rosanne Rademaker on March 2nd, 2009, shared lab room lights off% Check white: [255 255 255] = (339+344)/2 = 341.5, check: (83.6+231+29.8+80.3+227+29.1)/2 = 340.4,	% Check black: black = (0.46+0.46)/2 = 0.46% luminances measured using photometer (descending order, 1 run, 2 measures per level)Red = [0.1400    0.1450    0.1450    0.1400    0.1400    0.1400    0.1450    0.1400    0.1600    0.1700    0.1900    0.2100    0.2500    0.3250    0.4000    0.5250    0.7100 0.9200    1.1600    1.4200    1.8500    2.2650    2.7950    3.3700    4.0800    4.9500    5.4850    6.9500    8.3150   10.2250   11.7200   12.7350];Green = [0.0750    0.0800    0.0900    0.0900    0.0950    0.0950    0.0950    0.1200    0.1650    0.2250    0.3500    0.4500    0.6350    0.8500    1.2500    1.9250    2.8950 4.1150    5.1400    7.9350   10.8200   13.1750   16.3850   20.1850   24.7300   31.1000   37.7700   49.8500   60.6500   73.5750   85.3500   92.8000];    Blue = [0.1600    0.1550    0.1550    0.1500    0.1550    0.1600    0.1550    0.1650    0.1900    0.2000    0.2500    0.2900    0.3450    0.4250    0.5900    0.6850    0.9450 1.1150    1.5800    2.0200    2.5300    3.1050    3.8650    4.6500    5.7850    7.0950    8.7650   10.9700   13.8250   16.9350   19.1350   20.12];    Grey = [0.1300    0.1300    0.1400    0.1350    0.1450    0.1450    0.1450    0.2650    0.6400    0.9650    1.7400    2.1500    3.2000    4.5000    6.5500    9.4000   13.0500 17.9500   23.2000   29.9500   39.6500   49.7000   61.8500   76.2000   94.6500  118.5000  148.0000  187.3500  233.0000  283.5000  321.5000  363.7500];lum = [Red; Green; Blue; Grey]';dacsize = 32;voltage = kron(ones(1,size(lum,2)), (round(linspace(0,255,dacsize)))'); % voltage = kron([1 1 1], [0,32,64,96,128,160,192,224,255]'); 		% i.e. color number values, should be in ascending ordernormVolt = (voltage-voltage(1))/ (max(voltage(:)) - voltage(1));		% normalize to range 0 to 1maxLum = max(lum);% threshold = min(lum)/max(lum)figurecolor = 'rgbk';for n = 1:size(lum,2)	normLum(:,n) = (lum(:,n) - min(lum(:,n))) / (max(lum(:,n)) - min(lum(:,n)));			% normalize to range 0 to 1		% calculate gamma using threshold starting normVolt (leads to better fits) (i.e. MonitorGammaError)    a = normVolt(:,n);    b = normLum(:,n);    params=fminsearch(@(x) MonitorGammaError(x,a,b) ,[.1 2]);% 	params=fminsearch('MonitorGammaError',[.1 2],[],[],normVolt(:,n), normLum(:,n));	threshold(n) = params(1);	gamma(n) = params(2);	fit(:,n) = MonitorGamma(normVolt(:,n),params(1),params(2));			% fit of specific voltages using gamma power function	gamTable(:,n) = MonitorGamma([0:255]'/255,params(1),params(2));		% table of fitted gamma values 	mse(n) = mean( (normLum(:,n) - fit(:,n)).^2);		plot(normVolt(:,n), normLum(:,n), [color(n) '*']);	hold on;	plot(normVolt(:,n), fit(:,n), [color(n) '-']);	hold on;		endgamInverse = mkInvGammaTable(gamTable,256*size(lum,2));	% create inverse gamma table, note, 1st entry is 0 0 0, oversample gamma tablegamInverse = gamInverse(2:end,:);  				% very similar to InvertGammaTable.m in psychophysical toolbox except that [0 0 0]												% is first entry (rather than starting at much higher color number)cd(expdir)                                                dacsize = 32;												calibrationFile = ['calib_' date '.mat'];if ~savegrey    lum = lum(:,1:3);    voltage = voltage(:,1:3);    normLum = normLum(:,1:3);    normVolt=normVolt(:,1:3);    gamma=gamma(1:3);    threshold=threshold(1:3);    gamTable=gamTable(:,1:3);    gamInverse=gamInverse(:,1:3);    mse=mse(1:3);    maxLum= maxLum(1:3);    endeval(['save ' calibrationFile ' lum voltage normLum normVolt gamma threshold gamTable gamInverse mse computer maxLum dacsize']);% eval(['save calibrationNameFile calibrationFile']);% Function MonitorGamma uses gamma function y = x^g  where% x = input normVolt, y = normLuminance, % x0 = threshold normVolt before normLuminance starts to increase% fmins minimizes function MonitorGammaError (psychophysics toolbox) % which calculates mean squared error between % actual normLuminances as a function of normVolt and a gamma function specified in MonitorGamma% default starting values threshold = .1, gamma = 2% params(1) = threshold, params(2) = gamma		% calculate gamma using no threshold level for starting normVolt (leads to poorer fits) (i.e. MonitorGammaErrorFT)% params=fmins('MonitorGammaErrorFT',[.1 2],[],[],normVolt, normLum)% gamma = params(2)% fit = normVolt.^gamma% mse = mean( (normLum- fit).^2)% [fitvals] = FitGamma(255*normVolt',normLum',(0:255)','1');   % couldn't get this function to workfigure, plot(gamInverse)