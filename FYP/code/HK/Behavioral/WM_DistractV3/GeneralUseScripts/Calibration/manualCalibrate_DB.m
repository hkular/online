 %%%% Present uniform screen colors for manual calibration% Present red, green and blue in either ascending or descending voltage levels% evenly spaced between 0 and 255.% Press any key to advance to next color%% Created by frank tong, 2000/10/25% Modified as manualCalibrate2.m on 2002/01/07, modified for osX on 7/24/7% by JJ, modified by DB on 2008-07-09 to look nicer% % add random image...try    clear all    oldPref.Verb = Screen('Preference','Verbosity',1);          % suppress PTB command window messages upon opening screen        fprintf('\n<<< TONG LAB GAMMA CALIBRATION >>>\n');    %     calibrationFile = 'calib_iMAC_feb09.mat';        % Get user input    wanna = input('Do you wanna do b&w calibration? (1=y, 2=n, default = 2) ');    nlevels = input('How many levels of each gun would you like to present? (default = 1) ');    if isempty(nlevels)        nlevels = 1;        direction = [];    else        % If more than one level, which way should it go?         direction = input('(a)scending [default] or (d)escending luminance levels? ', 's');    end    temp = (round(linspace(0,255,nlevels)))';%     temp(1) = []; % remove 0 as entry    if ~isempty(direction) && (direction == 'd' || direction == 'D')        temp = flipud(temp);    end    color = zeros(nlevels*3,3);    color(1:nlevels,1) = temp;    color(nlevels+1:nlevels*2,2) = temp;    color(nlevels*2+1: nlevels*3,3) = temp;    color(size(color,1)+1,:) = [255,255,255];    color(size(color,1)+1,:) = [0,0,0];    if wanna        color = repmat(temp,1,3);    end        gamma_on = input('Apply gamma correction? (y or n [default]) ', 's');    if ~isempty(gamma_on) && (gamma_on == 'y' || gamma_on == 'Y')        gamma_on = true;    else        gamma_on = false;    end        if gamma_on        load(calibrationFile);        color = map2map(color/255,gamInverse);	% gamma correct the colors    end    color = round(color);        % Define color names    color_names = cell(size(color,1),1);        j = 1;    for i = 1:nlevels        color_names{i} = sprintf('RED %d',j);        j = j + 1;    end    j = 1;    for i = nlevels+1:nlevels*2        color_names{i} = sprintf('GREEN %d',j);        j = j + 1;    end    j = 1;     for i = nlevels*2+1: nlevels*3        color_names{i} = sprintf('BLUE %d',j);        j = j + 1;    end    color_names{end-1} = 'WHITE';    color_names{end} = 'BLACK';        if gamma_on        for i = 1:length(color_names)            color_names{i} = [color_names{i} ' gamma-corrected'];        end    end        HideCursor;%     ListenChar(2);        % Select the screen to present the stimuli. If you are using multiple monitors,     % we're assuming that the secondary monitor is the one you want to use.    screens = Screen('Screens'); % find out what screens are available    screenNumber = max(screens); % pick the highest screen number available    wptr = Screen('OpenWindow', screenNumber); % open a PTB screen    % wptr => window pointer    Screen('TextSize', wptr,20);        for n = 1:size(color,1)        Screen('FillRect',wptr,color(n,:));        Screen('DrawText',wptr,color_names{n},100,100,128);                Screen('Flip', wptr);                % Wait for keypress        while 1 % begin infinite loop            [keyIsDown,secs,keyCode] = KbCheck;            if keyIsDown                if keyCode(KbName('ESCAPE')) % If user presses ESCAPE, exit program                    error('User exited program.');                else % Otherwise, continue                    while KbCheck; end;                    break % exit infinite loop                end            end        end    endcatch    ThrowErrorDB;end% restore old preferencesScreen('Preference','Verbosity',oldPref.Verb);ListenChar(0);ShowCursor;Screen('CloseAll');